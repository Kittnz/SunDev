{% extends "layout.html.twig" %}
    {% block title %}{{ creature.name }}({{ creature.entry }}) Gossip - {{ parent() }}{% endblock %}
    {% block head %}
        <link rel="stylesheet" type="text/css" href="{{ app.request.basepath }}/css/gossip.css" />
    {% endblock %}
    {% block content %}
        <div class="col-md-9">
            <h2 class="pull-left" style="margin-right: 20px"><a href="{{ app.request.basepath }}/creature/entry/{{ creature.entry }}">{{ creature.name }}</a> - Gossip</h2>
            <div id="menus">

                <div class="col-sm-2" id="menusselectdiv" {{ gossip ? '' : 'style="display:none"' }}>
                    <select class="form-control" id="menusselect">
                        {% if gossip %}
                        {% for key, menu in gossip.menus %}
                        <option value="{{ key }}">{{ menu.id }}</option>
                        {% endfor %}
                        {% endif %}
                    </select>
                </div>
                <button type="button" id="add" class="btn btn-primary col-sm-2">{{ gossip ? 'Add a new gossip menu' : 'Create a gossip menu' }}</button>
                {{ gossip ? '<button type="button" id="remove" class="btn btn-danger col-sm-2">Remove the menu</button>' : '' }}
            </div>
        </div>
        <div class="col-md-3 text-right" style="margin-top: 30px">
            {% include 'review.html.twig' %}
        </div>
        <div class="col-md-4">
            <div class="gossip">
                <div class="guid_name">{{ creature.name }}</div>
                <div class="gossip_text">{% if gossip %}{% if gossip.menus|first and gossip.menus|first.text0 != null %}{{ gossip.menus|first.text0 }}{% elseif gossip.menus|first.text0 == null %}{{ gossip.menus|first.text1 }}{% endif %}{% endif %}</div>
                <div class="gossip_options">
                    {% if gossip %}
                    {% for option in gossip.menus|first['options'] %}
                    <div class="options" id="option_{{ option.id }}" onclick="displayMenu({{ option.next }})" title="Next menu: {{ option.next }}">
                        {{ option.icon|getGossipOptionIcon }} <span>{{ option.text }}</span>
                    </div>
                    {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>
        <div class="col-md-8 form-group" id="infos">
            {% if creature.gender == 'both' %}
            <div class="col-md-12 row">
                <div class="col-md-6 row">
                {% endif %}
                    {% if creature.gender == 'both' or creature.gender == 'male'%}
                    <h3>{% if creature.gender == 'both' %}Male {% endif %}Text</h3>
                    <textarea class="form-control" rows="4" id="gossip_text_male" {{ gossip ? 'menu='~gossip.menus|first.id : 'disabled' }}>{{ gossip ? gossip.menus|first.text0 : '' }}</textarea>
                    {% endif %}
                {% if creature.gender == 'both' %}
                </div>
                {% endif %}
                {% if creature.gender == 'both' %}
                <div class="col-md-6">
                {% endif %}
                    {% if creature.gender == 'both' or creature.gender == 'female'%}
                    <h3>{% if creature.gender == 'both' %}Female {% endif %}Text</h3>
                    <textarea class="form-control" rows="4" id="gossip_text_female" {{ gossip ? 'menu='~gossip.menus|first.id : 'disabled' }}>{{ gossip ? gossip.menus|first.text1 : '' }}</textarea>
                    {% endif %}
                {% if creature.gender == 'both' %}
                </div>
            </div>
            {% endif %}
            <br>
            <h3>Options</h3>
            <table class="table table-striped" id="gossip_options" style="margin-bottom: 0!important;">
                <thead>
                    <tr>
                        <th width="5%">ID</th>
                        <th width="10%">Icon</th>
                        <th width="50%">Text</th>
                        <th width="20%">NPC_Flag</th>
                        <th width="10%">Follow up</th>
                        <th width="5%"></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <br>
            <button type="button" id="addoption" class="btn btn-primary col-sm-2" {{ gossip ? '' : 'disabled' }}>Add new option</button>
        </div>
        <div class="col-md-8 col-md-offset-4" id="types">
            <h3>Conditions</h3>
            <table class="table table-striped" id="gossip_conditions" style="margin-bottom: 0!important;">
                <thead>
                    <tr>
                        <th class="col-md-1">Element</th>
                        <th class="col-md-2">Condition</th>
                        <th class="col-md-2"></th>
                        <th class="col-md-2"></th>
                        <th class="col-md-2"></th>
                        <th class="col-md-1">Reverse</th>
                        <th class="col-md-1"></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <br>
            <div class="col-md-2">
                <select class="form-control" id="newcondition"></select>
            </div>
            <button type="button" id="addcondition" class="btn btn-primary col-sm-2" style="display: block">Add new condition</button></div>
    {% endblock %}
    {% block script %}
        <script type="text/javascript" src="{{ app.request.basepath }}/js/dev.js"></script>
        <script type="text/javascript">
            "use strict";
            {% if gossip %}
            var Gossip = {{ gossip|json_encode|raw }};
            {% else %}
            var Gossip = { menus: {}, main: null };
            {% endif %}
            console.log(Gossip);

            var Info = { "entryorguid": {{ creature.entry }}, "source_type": 13 };

            $('#apply').click(function () {
                apply(Gossip, Info);
            });
            $('#review').click(function () {
                review(Gossip, Info);
            });
            $('#validate').click(function () {
                validate(Gossip, Info);
            });
            $('#refuse').click(function () {
                refuse(Gossip, Info);
            });

            var ConditionSourceType =
            {
                CONDITION_SOURCE_TYPE_NONE                           : "0",
                CONDITION_SOURCE_TYPE_CREATURE_LOOT_TEMPLATE         : "1",
                CONDITION_SOURCE_TYPE_DISENCHANT_LOOT_TEMPLATE       : "2",
                CONDITION_SOURCE_TYPE_FISHING_LOOT_TEMPLATE          : "3",
                CONDITION_SOURCE_TYPE_GAMEOBJECT_LOOT_TEMPLATE       : "4",
                CONDITION_SOURCE_TYPE_ITEM_LOOT_TEMPLATE             : "5",
                CONDITION_SOURCE_TYPE_MAIL_LOOT_TEMPLATE             : "6", //Not implemented
                CONDITION_SOURCE_TYPE_MILLING_LOOT_TEMPLATE          : "7", //Not implemented
                CONDITION_SOURCE_TYPE_PICKPOCKETING_LOOT_TEMPLATE    : "8",
                CONDITION_SOURCE_TYPE_PROSPECTING_LOOT_TEMPLATE      : "9",
                CONDITION_SOURCE_TYPE_REFERENCE_LOOT_TEMPLATE        : "10", //NYI
                CONDITION_SOURCE_TYPE_SKINNING_LOOT_TEMPLATE         : "11",
                CONDITION_SOURCE_TYPE_SPELL_LOOT_TEMPLATE            : "12", //NYI
                CONDITION_SOURCE_TYPE_SPELL_IMPLICIT_TARGET          : "13", //NYI
                CONDITION_SOURCE_TYPE_GOSSIP_MENU                    : "14",
                CONDITION_SOURCE_TYPE_GOSSIP_MENU_OPTION             : "15",
                CONDITION_SOURCE_TYPE_CREATURE_TEMPLATE_VEHICLE      : "16",
                CONDITION_SOURCE_TYPE_SPELL                          : "17",
                CONDITION_SOURCE_TYPE_SPELL_CLICK_EVENT              : "18", //Not implemented
                CONDITION_SOURCE_TYPE_QUEST_ACCEPT                   : "19",
                CONDITION_SOURCE_TYPE_QUEST_SHOW_MARK                : "20",
                CONDITION_SOURCE_TYPE_VEHICLE_SPELL                  : "21", //Not implemented
                CONDITION_SOURCE_TYPE_SMART_EVENT                    : "22",
                CONDITION_SOURCE_TYPE_NPC_VENDOR                     : "23",
                CONDITION_SOURCE_TYPE_SPELL_PROC                     : "24", //Not implemented
                CONDITION_SOURCE_TYPE_PHASE_DEFINITION               : "25",
                CONDITION_SOURCE_TYPE_MAX                            : "26"  // MAX
            };

            var ConditionTypes =
            {                                                             // value1           value2         value3
                0:     { name: "CONDITION_NONE",                   value1: "",                      value2: "",                     value3: "",                comment: "always true" },
                1:     { name: "CONDITION_AURA",                   value1: "Spell ID",              value2: "effIndex",             value3: "Use target",      comment: "true if player (or target, if value3) has aura of spell_id with effect effindex" },
                2:     { name: "CONDITION_ITEM",                   value1: "Item ID",               value2: "Count",                value3: "Bank",            comment: "true if has #count of item_ids (if 'bank' is set it searches in bank slots too)" },
                3:     { name: "CONDITION_ITEM_EQUIPPED",          value1: "Item ID",               value2: "",                     value3: "",                comment: "true if has item_id equipped" },
                4:     { name: "CONDITION_ZONEID",                 value1: "Zone ID",               value2: "",                     value3: "",                comment: "true if in zone_id" },
                5:     { name: "CONDITION_REPUTATION_RANK",        value1: "Faction ID",            value2: "rankMask",             value3: "",                comment: "true if has min_rank for faction_id" },
                6:     { name: "CONDITION_TEAM",                   value1: "Player Team",           value2: "",                     value3: "",                comment: "469 - Alliance, 67 - Horde)" },
                7:     { name: "CONDITION_SKILL",                  value1: "Skill ID",              value2: "Skill value",          value3: "",                comment: "true if has skill_value for skill_id" },
                8:     { name: "CONDITION_QUESTREWARDED",          value1: "Quest ID",              value2: "",                     value3: "",                comment: "true if quest_id was rewarded before" },
                9:     { name: "CONDITION_QUESTTAKEN",             value1: "Quest ID",              value2: "",                     value3: "",                comment: "true while quest active" },
                10:    { name: "CONDITION_DRUNKENSTATE",           value1: "Drunken State",         value2: "",                     value3: "",                comment: "true if player is drunk enough" },
                11:    { name: "CONDITION_WORLD_STATE",            value1: "Index",                 value2: "Value",                value3: "",                comment: "true if world has the value for the index" },
                12:    { name: "CONDITION_ACTIVE_EVENT",           value1: "Event ID",              value2: "",                     value3: "",                comment: "true if event is active" },
                13:    { name: "CONDITION_INSTANCE_INFO",          value1: "Entry",                 value2: "Data",                 value3: "Type",            comment: "true if the instance info defined by type (enum InstanceInfo) equals data." },
                14:    { name: "CONDITION_QUEST_NONE",             value1: "Quest ID",              value2: "",                     value3: "",                comment: "true if doesn't have quest saved" },
                15:    { name: "CONDITION_CLASS",                  value1: "Class",                 value2: "",                     value3: "",                comment: "true if player's class is equal to class" },
                16:    { name: "CONDITION_RACE",                   value1: "Race",                  value2: "",                     value3: "",                comment: "true if player's race       is equal to race" },
                17:    { name: "CONDITION_ACHIEVEMENT",            value1: "Achievement ID",        value2: "",                     value3: "",                comment: "true if achievement is complete" },
                18:    { name: "CONDITION_TITLE",                  value1: "Title ID",              value2: "",                     value3: "",                comment: "true if player has title" },
                19:    { name: "CONDITION_SPAWNMASK",              value1: "spawnMask",             value2: "",                     value3: "",                comment: "true if in spawnMask" },
                20:    { name: "CONDITION_GENDER",                 value1: "Gender",                value2: "",                     value3: "",                comment: "true if player's gender is equal to gender" },
                21:    { name: "CONDITION_UNIT_STATE",             value1: "unitState",             value2: "",                     value3: "",                comment: "true if unit has unitState" },
                22:    { name: "CONDITION_MAPID",                  value1: "Map ID",                value2: "",                     value3: "",                comment: "true if in map_id" },
                23:    { name: "CONDITION_AREAID",                 value1: "Area ID",               value2: "",                     value3: "",                comment: "true if in area_id" },
                24:    { name: "CONDITION_CREATURE_TYPE",          value1: "cinfo.type",            value2: "",                     value3: "",                comment: "true if creature_template.type : value1" },
                25:    { name: "CONDITION_SPELL",                  value1: "Spell ID",              value2: "",                     value3: "",                comment: "true if player has learned spell" },
                26:    { name: "CONDITION_PHASEMASK",              value1: "phasemask",             value2: "",                     value3: "",                comment: "true if object is in phasemask" },
                27:    { name: "CONDITION_LEVEL",                  value1: "Level",                 value2: "ComparisonType",       value3: "",                comment: "true if unit's level is equal to param1 (param2 can modify the statement)" },
                28:    { name: "CONDITION_QUEST_COMPLETE",         value1: "Quest ID",              value2: "",                     value3: "",                comment: "true if player has quest_id with all objectives complete, but not yet rewarded" },
                29:    { name: "CONDITION_NEAR_CREATURE",          value1: "Creature Entry",        value2: "Distance",             value3: "",                comment: "true if there is a creature of entry in range" },
                30:    { name: "CONDITION_NEAR_GAMEOBJECT",        value1: "Gameobject Entry",      value2: "Distance",             value3: "",                comment: "true if there is a gameobject of entry in range" },
                31:    { name: "CONDITION_OBJECT_ENTRY_GUID",      value1: "TypeID",                value2: "Entry",                value3: "Guid",            comment: "true if object is type TypeID and the entry is 0 or matches entry of the object or matches guid of the object" },
                32:    { name: "CONDITION_TYPE_MASK",              value1: "TypeMask",              value2: "",                     value3: "",                comment: "true if object is type object's TypeMask matches provided TypeMask" },
                33:    { name: "CONDITION_RELATION_TO",            value1: "ConditionTarget",       value2: "RelationType",         value3: "",                comment: "true if object is in given relation with object specified by ConditionTarget" },
                34:    { name: "CONDITION_REACTION_TO",            value1: "ConditionTarget",       value2: "rankMask",             value3: "",                comment: "true if object's reaction matches rankMask object specified by ConditionTarget" },
                35:    { name: "CONDITION_DISTANCE_TO",            value1: "ConditionTarget",       value2: "Distance",             value3: "ComparisonType",  comment: "true if object and ConditionTarget are within distance given by parameters" },
                36:    { name: "CONDITION_ALIVE",                  value1: "",                      value2: "",                     value3: "",                comment: "true if unit is alive" },
                37:    { name: "CONDITION_HP_VAL",                 value1: "Hp val",                value2: "ComparisonType",       value3: "",                comment: "true if unit's hp matches given value" },
                38:    { name: "CONDITION_HP_PCT",                 value1: "HP %",                  value2: "ComparisonType",       value3: "",                comment: "true if unit's hp matches given pct" },
                39:    { name: "CONDITION_REALM_ACHIEVEMENT",      value1: "Achievement ID",        value2: "",                     value3: "",                comment: "true if realm achievement is complete" },
                40:    { name: "CONDITION_IN_WATER",               value1: "",                      value2: "",                     value3: "",                comment: "true if unit in water" }
            };


            var Gender          = '{{ creature.gender }}';
            var CreatureName    = $('#creatureName');
            var GossipUI        = $('.gossip');
            var GossipName      = $('.guid_name');
            var GossipTextMale  = $('#gossip_text_male');
            var GossipTextFemale= $('#gossip_text_female');
            var GossipTextUI    = $('.gossip_text');
            var GossipOptions   = $('#gossip_options tbody');
            var GossipOptionsUI = $('.gossip_options');
            var Menus           = $('#menus');
            var MenusSelect     = $('#menusselect');
            var AddMenu         = $('#add');
            var AddOption       = $('#addoption');
            var AddCondition    = $('#addcondition');
            var ConditionSelect = $('#newcondition');
            var RemoveMenu      = $('#remove');
            var newConditionID;
            var getNewCondition = -1;
            var i;
            var x;
            var Data;
            var NewGossipMenu   = 0;
            var NewCondition    = 0;
            var GossipIcon;
            var OptionsCount;
            var NewOptionsCount;
            var Conditions      = $('#gossip_conditions tbdoy');
            var CurrentMenu     = {{ gossip ? gossip.menus|first.id : 0 }};

            displayMenu(CurrentMenu);


            /**
             * Display the Gossip Menu on Select Menus change
             */
            MenusSelect.change(function(){
                displayMenu($(this).val());
            });

            /**
             * Create or Add a new Gossip Menu
             */
            AddMenu.click(function() {
                $('#result').html('');
                Gossip.menus['new'+NewGossipMenu] = { id: 'new'+NewGossipMenu, text0: null, text1: null, options: [], conditions: [] };

                if(Gossip.main == null){
                    Gossip.main = 'new'+NewGossipMenu;
                    Menus.append('<button type="button" id="remove" class="btn btn-danger col-sm-2">Remove the menu</button>');
                }

                $('#menusselectdiv').show();
                MenusSelect.append('<option value="new'+NewGossipMenu+'">New '+NewGossipMenu+'</option>').val('new'+NewGossipMenu);
                displayMenu(Gossip.menus['new'+NewGossipMenu].id);
                $(this).html('Add a new gossip menu');
                {% if creature.gender == 'male' or creature.gender == 'both' %}
                GossipTextMale.removeAttr('disabled');
                GossipTextMale.attr('menu', 'new'+NewGossipMenu);
                {% endif %}
                {% if creature.gender == 'female' or creature.gender == 'both' %}
                GossipTextFemale.removeAttr('disabled');
                GossipTextFeMale.attr('menu', 'new'+NewGossipMenu);
                {% endif %}
                AddOption.prop("disabled", false);
                AddCondition.prop("disabled", false);
                NewGossipMenu++;
            });

            $(document).on('click', '#remove', function(){
                delete Gossip.menus[MenusSelect.val()];
                $('#menusselect option[value="'+MenusSelect.val()+'"]').remove();
                if(jQuery.isEmptyObject(Gossip.menus)){
                    NewGossipMenu = 0;
                    Gossip.main = null;
                    $('#remove').remove();
                    $('#menusselectdiv').hide();
                    GossipTextFemale.prop("disabled", true);
                    GossipTextMale.prop("disabled", true);
                    AddOption.prop("disabled", true);
                    AddCondition.prop("disabled", true);
                } else {
                    displayMenu(Object.keys(Gossip.menus)[0]);
                }

            }).keydown(function(e) {
                if(!jQuery.isEmptyObject(Gossip.menus))
                {
                    var keys = Object.keys(Gossip.menus);
                    var index = keys.indexOf(MenusSelect.val());
                    switch(e.which) {
                        case 37: // left
                        case 38: // up
                            if(index <= 0)
                                index = 1;
                            displayMenu(Object.keys(Gossip.menus)[index - 1]);
                            break;

                            break;

                        case 39: // right
                        case 40: // down
                            if(index == Object.keys(Gossip.menus).length - 1)
                                index = index -1;
                            displayMenu(Object.keys(Gossip.menus)[index + 1]);
                            break;

                        default: return; // exit this handler for other keys
                    }
                }
                e.preventDefault(); // prevent the default action (scroll / move caret)
            });

            /**
             * Create a new Option
             */
            AddOption.click(function() {
                var id;
                if(jQuery.isEmptyObject(Object.keys(Gossip.menus[CurrentMenu].options)))
                    id = 0;
                else {
                    id = parseInt(Object.keys(Gossip.menus[CurrentMenu].options).reverse()[0]) + 1;
                }
                Gossip.menus[CurrentMenu].options[id] = { id: id, icon: 0, text: '', next: 0, flag: 1, conditions: [] };
                displayOption(CurrentMenu);
            });

            /**
             * Create a new Condition
             */
            AddCondition.click(function(){
                var Source = $('#newcondition').val();
                if(Source.startsWith('menu'))
                    Gossip.menus[CurrentMenu].conditions[NewCondition] = { id: 'new'+NewCondition, type: 0, source: 14, target: 0, value1: 0, value2: 0, value3: 0, reverse: 0 };
                if(Source.startsWith('option'))
                    Gossip.menus[CurrentMenu].options[Source.match(/\d+/)[0]].conditions[NewCondition] = { id: 'new'+NewCondition, type: 0, source: 15, target: 0, value1: 0, value2: 0, value3: 0, reverse: 0 };
                displayCondition(CurrentMenu);
                NewCondition++;
            });

            /**
             * Save and display the Gossip Male Text on keyup
             */
            GossipTextMale.keyup(function(){
                {% if creature.gender == 'male' %}GossipTextUI.html($(this).val().replace(/\$b/g, '<br>'));{% endif %}
                Gossip.menus[$(this).attr('menu')].text0 = $(this).val();
            });

            /**
             * Save and display the Gossip Female Text on keyup
             */
            GossipTextFemale.keyup(function(){
                {% if creature.gender == 'female' %}GossipTextUI.html($(this).val().replace(/\$b/g, '<br>'));{% endif %}
                Gossip.menus[$(this).attr('menu')].text1 = $(this).val();
            });

            /**
             * Display the given Gossip Menu
             */
            function displayMenu(id) {
                if(id == 0)
                    return;
                MenusSelect.val(id);
                CurrentMenu = id;
                GossipTextMale.val(Gossip.menus[id].text0);
                GossipTextMale.attr('menu', CurrentMenu);
                GossipTextFemale.val(Gossip.menus[id].text1);
                GossipTextFemale.attr('menu', CurrentMenu);

                if(Gossip.menus[id].text0 != null || Gossip.menus[id].text1 != null)
                    GossipTextUI.html(Gossip.menus[id].text{% if creature.gender == 'both' or creature.gender == 'male' %}0{% else %}1{% endif %}.replace(/\$b/g, '<br>'));
                if(Gossip.menus[id].text0 == null && Gossip.menus[id].text1 == null)
                    GossipTextUI.html('');

                ConditionSelect.html('<option value="menu-'+CurrentMenu+'">Menu '+CurrentMenu+'</option>');
                $.each(Object.keys(Gossip.menus[id].options), function(){
                    ConditionSelect.append('<option value="option-'+this+'">Option '+this+'</option>');
                });
                displayOption(id);
                displayCondition(id);
            }

            /**
             * Display the Gossip Options for the given Gossip Menu
             */
            function displayOption(id) {
                GossipOptions.empty();
                GossipOptionsUI.empty();
                $.each(Gossip.menus[id].options, function() {
                    GossipOptions.append('' +
                        '<tr>' +
                        '   <td>' + this.id + '</td>' +
                        '   <td>' +
                        '       <select class="form-control" id="icon_' + this.id + '" onchange="updateOption(' + id + ', ' + this.id + ', \'icon\', this.value)">' +
                        '           <option value="0">Chat</option>' +
                        '           <option value="1">Vendor</option>' +
                        '           <option value="2">Taxi</option>' +
                        '           <option value="3">Trainer</option>' +
                        '           <option value="4">Interact 1</option>' +
                        '           <option value="5">Interact 2</option>' +
                        '           <option value="6">Banker</option>' +
                        '           <option value="7">Talk</option>' +
                        '           <option value="8">Tabard</option>' +
                        '           <option value="9">Battle</option>' +
                        '           <option value="10">Quest</option>' +
                        '       </select>' +
                        '   </td>' +
                        '   <td><textarea class="form-control" rows="1" onchange="updateOption(' + id + ', ' + this.id + ', \'text\', this.value)">' + this.text + '</textarea></td>' +
                        '   <td>' +
                        '       <select class="form-control" id="flag_' + this.id + '" onchange="updateOption(' + id + ', ' + this.id + ', \'flag\', this.value)">' +
                        '           <option value="1">Gossip</option>' +
                        '           <option value="2">Quest Giver</option>' +
                        '           <option value="16">Trainer</option>' +
                        '           <option value="32">Trainer Class</option>' +
                        '           <option value="64">Trainer Profession</option>' +
                        '           <option value="128">Vendor</option>' +
                        '           <option value="256">Vendor Ammo</option>' +
                        '           <option value="512">Vendor Food</option>' +
                        '           <option value="1024">Vendor Poison</option>' +
                        '           <option value="2048">Vendor Reagent</option>' +
                        '           <option value="4096">Repair</option>' +
                        '           <option value="8192">Flight Master</option>' +
                        '           <option value="16384">Spirit Healer</option>' +
                        '           <option value="32768">Spirit Guide</option>' +
                        '           <option value="65536">Innkeeper</option>' +
                        '           <option value="131072">Banker</option>' +
                        '           <option value="262144">Petitioner</option>' +
                        '           <option value="524288">Tabard Designer</option>' +
                        '           <option value="1048576">Battle Master</option>' +
                        '           <option value="2097152">Auctioneer</option>' +
                        '           <option value="4194304">Stable Master</option>' +
                        '           <option value="8388608">Guild Banker</option>' +
                        '           <option value="16777216">Spellclick</option>' +
                        '       </select>' +
                        '   </td>' +
                        '   <td><input type="text" class="form-control" onchange="updateOption(' + id + ', ' + this.id + ', \'next\', this.value)" value="' + this.next + '" /></td>' +
                        '   <td><span class="glyphicon glyphicon-remove" onclick="updateOption(' + id + ', ' + this.id + ', \'delete\', 0)"></span></td>' +
                        '</tr>');
                    $('#icon_'+this.id).val(this.icon);
                    $('#flag_'+this.id).val(this.flag);

                    GossipOptionsUI.append('' +
                        '<div class="options" id="option_'+this.id+'" onclick="displayMenu('+this.next+')" title="Next menu: '+this.next+'">' +
                        '    <img src="{{ app.request.basepath }}/img/gossip/'+getIcon(this.icon)+'.png" alt=""> <span>'+this.text+'</span>' +
                        '</div>');
                });
            }

            /**
             * Display the Gossip Condition for the given Gossip Menu
             */
            function displayCondition(id) {
                $('#gossip_conditions tbody').html('');
                $.each(Object.keys(Gossip.menus[id].conditions), function(){
                    appendConditions('menu', Gossip.menus[id].conditions[this]);
                    changeCondition('type', this);
                    changeCondition('value1', this);
                    changeCondition('value2', this);
                    changeCondition('value3', this);
                    changeCondition('reverse', this);
                });
                $.each(Object.keys(Gossip.menus[id].options), function(){
                    var option = this;
                    $.each(Object.keys(Gossip.menus[id].options[option].conditions), function() {
                        appendConditions('option', Gossip.menus[id].options[option].conditions[this]);
                        changeCondition('type', this);
                        changeCondition('value1', this);
                        changeCondition('value2', this);
                        changeCondition('value3', this);
                        changeCondition('reverse', this);
                    });
                });
            }

            /**
             * Save the Gossip Conditions Values in the Gossip Object
             */
            function changeCondition(type, id){
                $(document).on('change', '#'+type+'_'+id.match(/\d+/)[0], function(){
                    //debugger;
                    var value = $(this).val();
                    $.each(Object.keys(Gossip.menus[CurrentMenu].conditions), function() {
                        if (this == id)
                            Gossip.menus[CurrentMenu].conditions[id.match(/\d+/)[0]][type] = parseInt(value);
                        if(type == 'type')
                            appendConditionInputForm(Gossip.menus[CurrentMenu].conditions[id.match(/\d+/)[0]], value);
                    });
                    $.each(Object.keys(Gossip.menus[CurrentMenu].options), function() {
                        var option = this;
                        $.each(Object.keys(Gossip.menus[CurrentMenu].options[option].conditions), function() {
                            if (this == id)
                                Gossip.menus[CurrentMenu].options[option].conditions[id.match(/\d+/)[0]][type] = parseInt(value);
                            if(type == 'type')
                                appendConditionInputForm(Gossip.menus[CurrentMenu].options[option].conditions[id.match(/\d+/)[0]], value);
                        });
                    });
                });
            }

            /**
             * Append the Conditions to the table
             */
            function appendConditions(type, data) {
                var element;
                if(type == 'menu')
                    element = 'Menu ' + CurrentMenu;
                else
                    element = 'Option ' + ConditionSelect.val().match(/\d+/)[0];
                $('#gossip_conditions tbody').append('' +
                        '<tr>' +
                        '   <td>'+element+'</td>' +
                        '   <td>' +
                        '       <select class="form-control" id="type_'+data.id.match(/\d+/)[0]+'">' +
                        '           <option value="0">None</option>' +
                        '           <option value="8">Quest rewarded</option>' +
                        '           <option value="9">Quest taken</option>' +
                        '           <option value="28">Quest complete</option>' +
                        '           <option value="14">Quest none</option>' +
                        '           <option value="15">Class</option>' +
                        '           <option value="16">Race</option>' +
                        '           <option value="1">Aura</option>' +
                        '           <option value="2">Item</option>' +
                        '           <option value="3">Item equipped</option>' +
                        '           <option value="4">ZoneID</option>' +
                        '           <option value="5">Reputation rank</option>' +
                        '           <option value="6">Team</option>' +
                        '           <option value="7">Skill</option>' +
                        '           <option value="10">Drunken state</option>' +
                        '           <option value="11">World state</option>' +
                        '           <option value="12">Active event</option>' +
                        '           <option value="13">Instance info</option>' +
                        '           <option value="18">Title</option>' +
                        '           <option value="20">Gender</option>' +
                        '           <option value="22">MapID</option>' +
                        '           <option value="23">AreaID</option>' +
                        '           <option value="25">Spell</option>' +
                        '           <option value="27">Level</option>' +
                        '           <option value="29">Near creature</option>' +
                        '           <option value="30">Near gameobject</option>' +
                        '           <option value="37">HP Value</option>' +
                        '           <option value="38">HP %</option>' +
                        '       </select>' +
                        '   </td>' +
                        '   <td>' +
                        '       <div class="input-group">' +
                        '           <div class="input-group-addon"></div>' +
                        '               <input type="text" class="form-control" id="value1_' + data.id.match(/\d+/)[0] + '" disabled>' +
                        '           </div>' +
                        '       </div>' +
                        '   </td>' +
                        '   <td>' +
                        '       <div class="input-group">' +
                        '           <div class="input-group-addon"></div>' +
                        '               <input type="text" class="form-control" id="value2_' + data.id.match(/\d+/)[0] + '" disabled>' +
                        '           </div>' +
                        '       </div>' +
                        '   </td>' +
                        '   <td>' +
                        '       <div class="input-group">' +
                        '           <div class="input-group-addon"></div>' +
                        '               <input type="text" class="form-control" id="value3_' + data.id.match(/\d+/)[0] + '" disabled>' +
                        '           </div>' +
                        '       </div>' +
                        '   </td>' +
                        '   <td>' +
                        '       <select class="form-control" id="reverse_'+data.id.match(/\d+/)[0]+'">' +
                        '           <option value="0">No</option>' +
                        '           <option value="1">Yes</option>' +
                        '       </select>' +
                        '   </td>' +
                        '   <td><span class="glyphicon glyphicon-remove" onclick="deleteCondition(\''+type+'\', '+ConditionSelect.val().match(/\d+/)[0]+', \''+data.id.match(/\d+/)[0]+'\')"></span>' +
                        '   </td>' +
                        '</tr>');
                appendConditionInputForm(data, data.type);
                $('#type_'+data.id).val(data.type);
                $('#reverse_'+data.id).val(data.reverse);
            }

            /**
             * Return the File Name of the given Gossip Menu Icon
             */
            function getIcon(data) {
                switch(parseInt(data)) {
                    case 0: return "GossipGossipIcon";
                    case 1: return "VendorGossipIcon";
                    case 2: return "TaxiGossipIcon";
                    case 3: return "TrainerGossipIcon";
                    case 4: return "BinderGossipIcon";
                    case 5: return "HealerGossipIcon";
                    case 6: return "BankerGossipIcon";
                    case 7: return "PetitionGossipIcon";
                    case 8: return "TabardGossipIcon";
                    case 9: return "BattleMasterGossipIcon";
                    case 10: return "UI-Quest-BulletPoint";
                    default: return;
                }
            }

            /**
             * Save the Gossip Option in the Gossip Object
             */
            function updateOption(Menu, id, Info, Value) {
                if(Info == 'delete'){
                    delete Gossip.menus[CurrentMenu].options[id];
                    return displayOption(CurrentMenu);
                }

                if(Info == "text")
                    $('#option_' + id + ' span').html(Value);
                else if (Info == "icon")
                    $('#option_' + id + ' img').attr('src', "/img/gossip/" + getIcon(Value) + ".png");
                else if (Info == "next")
                    $('#option_' + id).attr('title', 'Next menu:' + Value);
                Gossip.menus[Menu].options[id][Info] = Value;
            }

            /**
             * Save the Gossip Condition in the given Gossip Object
             */
            function updateCondition(type, element, info, id){
                if(type == 'menu') {
                    Gossip.menus[CurrentMenu].conditions[id][info] = $('#'+info+'_'+id).val();

                    $('#type_'+id).change(function(){
                        appendConditionInputForm(Gossip.menus[CurrentMenu].conditions[id], $(this).val(), 'menu')
                    });
                }
                else {
                    Gossip.menus[CurrentMenu].options[element].conditions[id][info] = $('#'+info+'_'+id).val();

                    $('#type_'+id).change(function(){
                        appendConditionInputForm(Gossip.menus[CurrentMenu].options[element].conditions[id], $(this).val(), 'option')
                    });
                }
            }

            /**
             * Delete the condition from the Gossip object.
             */
            function deleteCondition(type, element, id) {
                if (type == 'menu')
                    delete Gossip.menus[CurrentMenu].conditions[id];
                else
                    delete Gossip.menus[CurrentMenu].options[element].conditions[id];
                displayCondition(CurrentMenu);
            }

            /**
             * Display or not the Conditions Values depending on ConditionTypes
             */
            function appendConditionInputForm(data) {
                var Condition = ConditionTypes[data.type];
                if(data.type == 15) {
                    $('#value1_' + data.id.match(/\d+/)[0]).closest('td').html('<select class="form-control" id="value1_' + data.id.match(/\d+/)[0] + '">' +
                            '   <option value="1">Warrior</option>' +
                            '   <option value="2">Paladin</option>' +
                            '   <option value="3">Hunter</option>' +
                            '   <option value="4">Rogue</option>' +
                            '   <option value="5">Priest</option>' +
                            '   <option value="7">Shaman</option>' +
                            '   <option value="8">Mage</option>' +
                            '   <option value="9">Warlock</option>' +
                            '   <option value="11">Druid</option>' +
                            '</select>').val(data['value1']);
                    $('#value2_' + data.id).val(data['value2']).attr('disabled', true).hide().closest('td').find('.input-group-addon').html('').hide();
                    $('#value3_' + data.id).val(data['value3']).attr('disabled', true).hide().closest('td').find('.input-group-addon').html('').hide();
                    return;
                } else if (data.type == 16) {
                    $('#value1_' + data.id.match(/\d+/)[0]).closest('td').html('<select class="form-control" id="value1_' + data.id.match(/\d+/)[0] + '">' +
                            '   <option value="1">Human</option>' +
                            '   <option value="2">Orc</option>' +
                            '   <option value="3">Dwarf</option>' +
                            '   <option value="4">Night Elf</option>' +
                            '   <option value="5">Undead</option>' +
                            '   <option value="6">Tauren</option>' +
                            '   <option value="7">Gnome</option>' +
                            '   <option value="8">Troll</option>' +
                            '   <option value="10">Blood Elf</option>' +
                            '   <option value="11">Draenei</option>' +
                            '</select>').val(data['value1']);
                    $('#value2_' + data.id.match(/\d+/)[0]).val(data['value2']).attr('disabled', true).hide().closest('td').find('.input-group-addon').html('').hide();
                    $('#value3_' + data.id.match(/\d+/)[0]).val(data['value3']).attr('disabled', true).hide().closest('td').find('.input-group-addon').html('').hide();
                    return;
                }
                for(i = 1; i < 4; i++) {
                    var element = $('#value'+i+'_' + data.id.match(/\d+/)[0]);
                    if(Condition['value'+i] != '')
                        element.closest('td').html('<div class="input-group"><div class="input-group-addon">'+Condition['value'+i]+'</div><input type="text" class="form-control" id="value'+i+'_' + data.id.match(/\d+/)[0] + '" value="'+data['value'+i]+'"></div></div>');
                    else
                        element.closest('td').html('<div class="input-group" style="display: none"><div class="input-group-addon"></div><input type="text" class="form-control" id="value'+i+'_' + data.id.match(/\d+/)[0] + '" disabled></div></div>');
                }
            }
        </script>
    {% endblock %}